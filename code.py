# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18uwB9DYhzUMUzZRrSE5oLyu50ia_dYo6
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime
import io

# Configuration de la page
st.set_page_config(
    page_title="Dashboard Spotify 2024",
    page_icon="üéµ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© pour un design moderne
st.markdown("""
<style>
    .main {
        padding-top: 2rem;
    }

    .stMetric {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 15px;
        color: white;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .stMetric > div {
        color: white !important;
    }

    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin: 10px 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .big-number {
        font-size: 2.5rem;
        font-weight: bold;
        margin: 10px 0;
    }

    .metric-label {
        font-size: 1.1rem;
        opacity: 0.9;
    }

    .insight-card {
        background: linear-gradient(135deg, #ff6b6b, #ee5a24);
        padding: 20px;
        border-radius: 15px;
        color: white;
        margin: 10px 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .success-card {
        background: linear-gradient(135deg, #00d2d3, #54a0ff);
        padding: 20px;
        border-radius: 15px;
        color: white;
        margin: 10px 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .sidebar .sidebar-content {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    h1 {
        text-align: center;
        color: #667eea;
        font-size: 3rem;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }

    .header-subtitle {
        text-align: center;
        color: #666;
        font-size: 1.2rem;
        margin-bottom: 2rem;
    }

    .stSelectbox > div > div {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .stMultiSelect > div > div {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }
</style>
""", unsafe_allow_html=True)

# Fonction pour formater les nombres
def format_number(num):
    if pd.isna(num) or num == 0:
        return "0"
    elif num >= 1_000_000_000:
        return f"{num/1_000_000_000:.1f}B"
    elif num >= 1_000_000:
        return f"{num/1_000_000:.1f}M"
    elif num >= 1_000:
        return f"{num/1_000:.1f}K"
    else:
        return str(int(num))

# Fonction pour nettoyer les donn√©es
def clean_numeric_column(series):
    """Convertit une s√©rie avec des virgules en nombres"""
    if series.dtype == 'object':
        return pd.to_numeric(series.astype(str).str.replace(',', ''), errors='coerce').fillna(0)
    return series.fillna(0)

# Fonction pour charger les donn√©es
@st.cache_data
def load_data():
    """Charge et nettoie les donn√©es Spotify"""
    try:
        # Essayer de charger le fichier upload√©
        df = pd.read_csv('Most Streamed Spotify Songs 2024.csv', encoding='cp1252')
    except:
        # Donn√©es de d√©monstration si le fichier n'est pas trouv√©
        demo_data = {
            'Track': ['MILLION DOLLAR BABY', 'Not Like Us', 'Blinding Lights', 'Shape of You', 'Someone You Loved'],
            'Artist': ['Tommy Richman', 'Kendrick Lamar', 'The Weeknd', 'Ed Sheeran', 'Lewis Capaldi'],
            'Spotify Streams': ['390,470,936', '323,703,884', '4,281,543,000', '3,909,500,000', '3,427,500,000'],
            'Spotify Popularity': [92, 92, 87, 85, 83],
            'TikTok Views': ['5,332,281,936', '208,339,025', '1,200,000,000', '800,000,000', '600,000,000'],
            'YouTube Views': ['84,274,754', '116,347,040', '2,500,000,000', '5,200,000,000', '3,100,000,000'],
            'Explicit Track': [0, 1, 0, 0, 0],
            'Release Date': ['4/26/2024', '5/4/2024', '11/29/2019', '1/6/2017', '3/8/2019'],
            'Track Score': [725.4, 545.9, 892.1, 856.3, 745.2]
        }
        df = pd.DataFrame(demo_data)

    # Nettoyer les colonnes num√©riques
    numeric_columns = ['Spotify Streams', 'Spotify Playlist Count', 'Spotify Playlist Reach',
                      'YouTube Views', 'YouTube Likes', 'TikTok Posts', 'TikTok Likes',
                      'TikTok Views', 'Pandora Streams', 'Shazam Counts', 'AirPlay Spins']

    for col in numeric_columns:
        if col in df.columns:
            df[col] = clean_numeric_column(df[col])

    # Nettoyer les donn√©es manquantes
    df = df.dropna(subset=['Track', 'Artist'])

    # Convertir la date de sortie
    if 'Release Date' in df.columns:
        df['Release Date'] = pd.to_datetime(df['Release Date'], errors='coerce')
        df['Release Year'] = df['Release Date'].dt.year
        df['Release Month'] = df['Release Date'].dt.month_name()

    return df

# Fonction principale
def main():
    # En-t√™te
    st.markdown("<h1>üéµ Dashboard Spotify 2024</h1>", unsafe_allow_html=True)
    st.markdown("<p class='header-subtitle'>Analyse des musiques les plus stream√©es de l'ann√©e</p>", unsafe_allow_html=True)

    # Chargement des donn√©es
    with st.spinner('Chargement des donn√©es...'):
        df = load_data()

    # Sidebar pour les filtres
    st.sidebar.markdown("## üéõÔ∏è Filtres et Options")

    # Upload de fichier
    uploaded_file = st.sidebar.file_uploader(
        "Uploadez votre fichier CSV Spotify",
        type=['csv'],
        help="Uploadez un fichier CSV avec les donn√©es Spotify"
    )

    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file, encoding='cp1252')
            # Nettoyer les donn√©es upload√©es
            numeric_columns = ['Spotify Streams', 'Spotify Playlist Count', 'YouTube Views', 'TikTok Views']
            for col in numeric_columns:
                if col in df.columns:
                    df[col] = clean_numeric_column(df[col])
            df = df.dropna(subset=['Track', 'Artist'])
            st.sidebar.success("‚úÖ Fichier charg√© avec succ√®s!")
        except Exception as e:
            st.sidebar.error(f"Erreur lors du chargement: {e}")

    # Filtres
    st.sidebar.markdown("### Filtres de donn√©es")

    # Filtre par popularit√©
    if 'Spotify Popularity' in df.columns:
        min_popularity = st.sidebar.slider(
            "Popularit√© minimale",
            min_value=0,
            max_value=100,
            value=0,
            help="Filtrer par score de popularit√© Spotify"
        )
        df_filtered = df[df['Spotify Popularity'] >= min_popularity]
    else:
        df_filtered = df

    # Filtre par artiste
    if len(df_filtered) > 0:
        top_artists = df_filtered.groupby('Artist')['Spotify Streams'].sum().nlargest(20).index.tolist()
        selected_artists = st.sidebar.multiselect(
            "S√©lectionner des artistes",
            options=['Tous'] + top_artists,
            default=['Tous'],
            help="Filtrer par artistes sp√©cifiques"
        )

        if 'Tous' not in selected_artists and selected_artists:
            df_filtered = df_filtered[df_filtered['Artist'].isin(selected_artists)]

    # Filtre par contenu explicite
    if 'Explicit Track' in df_filtered.columns:
        explicit_filter = st.sidebar.selectbox(
            "Contenu explicite",
            options=['Tous', 'Seulement explicite', 'Seulement clean'],
            help="Filtrer par type de contenu"
        )

        if explicit_filter == 'Seulement explicite':
            df_filtered = df_filtered[df_filtered['Explicit Track'] == 1]
        elif explicit_filter == 'Seulement clean':
            df_filtered = df_filtered[df_filtered['Explicit Track'] == 0]

    # Statistiques principales
    st.markdown("## üìä Statistiques Principales")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        total_tracks = len(df_filtered)
        st.markdown(f"""
        <div class="metric-card">
            <div class="big-number">{total_tracks:,}</div>
            <div class="metric-label">Pistes Totales</div>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        total_streams = df_filtered['Spotify Streams'].sum()
        st.markdown(f"""
        <div class="metric-card">
            <div class="big-number">{format_number(total_streams)}</div>
            <div class="metric-label">Streams Totaux</div>
        </div>
        """, unsafe_allow_html=True)

    with col3:
        if 'Spotify Popularity' in df_filtered.columns:
            avg_popularity = df_filtered['Spotify Popularity'].mean()
            st.markdown(f"""
            <div class="metric-card">
                <div class="big-number">{avg_popularity:.1f}</div>
                <div class="metric-label">Popularit√© Moyenne</div>
            </div>
            """, unsafe_allow_html=True)

    with col4:
        if 'Explicit Track' in df_filtered.columns:
            explicit_pct = (df_filtered['Explicit Track'].sum() / len(df_filtered) * 100)
            st.markdown(f"""
            <div class="metric-card">
                <div class="big-number">{explicit_pct:.1f}%</div>
                <div class="metric-label">Contenu Explicite</div>
            </div>
            """, unsafe_allow_html=True)

    # Recherche
    st.markdown("## üîç Recherche")
    search_term = st.text_input(
        "Rechercher une chanson ou un artiste",
        placeholder="Tapez le nom d'une chanson ou d'un artiste...",
        help="La recherche fonctionne en temps r√©el"
    )

    if search_term:
        search_mask = (
            df_filtered['Track'].str.contains(search_term, case=False, na=False) |
            df_filtered['Artist'].str.contains(search_term, case=False, na=False)
        )
        df_search = df_filtered[search_mask]
        st.info(f"üéØ {len(df_search)} r√©sultat(s) trouv√©(s) pour '{search_term}'")
        df_display = df_search
    else:
        df_display = df_filtered

    # Graphiques
    st.markdown("## üìà Visualisations")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üé§ Top 10 Artistes par Streams")
        if len(df_display) > 0:
            artist_stats = df_display.groupby('Artist').agg({
                'Spotify Streams': 'sum',
                'Track': 'count'
            }).round(0)
            artist_stats.columns = ['Total Streams', 'Nombre de Chansons']
            artist_stats = artist_stats.nlargest(10, 'Total Streams')

            fig_artists = px.bar(
                x=artist_stats.index,
                y=artist_stats['Total Streams'] / 1_000_000_000,
                labels={'x': 'Artiste', 'y': 'Streams (Milliards)'},
                color=artist_stats['Total Streams'],
                color_continuous_scale='viridis'   ,
                title="Streams par Artiste (en Milliards)"
            )
            fig_artists.update_layout(
                xaxis_tickangle=-45,
                height=400,
                showlegend=False,
                coloraxis_showscale=False
            )
            st.plotly_chart(fig_artists, use_container_width=True)

    with col2:
        st.markdown("### üìä Distribution de Popularit√©")
        if 'Spotify Popularity' in df_display.columns:
            # Cr√©er des bins de popularit√©
            df_display['Popularity Range'] = pd.cut(
                df_display['Spotify Popularity'],
                bins=[0, 20, 40, 60, 80, 100],
                labels=['0-20', '21-40', '41-60', '61-80', '81-100']
            )

            popularity_counts = df_display['Popularity Range'].value_counts()

            fig_popularity = px.pie(
                values=popularity_counts.values,
                names=popularity_counts.index,
                title="R√©partition des Scores de Popularit√©",
                color_discrete_sequence=px.colors.sequential.Viridis
            )
            fig_popularity.update_traces(textposition='inside', textinfo='percent+label')
            fig_popularity.update_layout(height=400)
            st.plotly_chart(fig_popularity, use_container_width=True)

    # Graphique de corr√©lation
    st.markdown("### üîó Analyse de Corr√©lation")
    correlation_cols = ['Spotify Streams', 'Spotify Popularity', 'TikTok Views', 'YouTube Views']
    available_cols = [col for col in correlation_cols if col in df_display.columns]

    if len(available_cols) >= 2:
        col1, col2 = st.columns(2)

        with col1:
            x_axis = st.selectbox("Axe X", available_cols, index=0)
        with col2:
            y_axis = st.selectbox("Axe Y", available_cols, index=1 if len(available_cols) > 1 else 0)

        if x_axis != y_axis:
            fig_scatter = px.scatter(
                df_display.head(500),  # Limiter pour les performances
                x=x_axis,
                y=y_axis,
                color='Spotify Popularity' if 'Spotify Popularity' in df_display.columns else None,
                hover_data=['Track', 'Artist'],
                title=f"Corr√©lation: {x_axis} vs {y_axis}",
                color_continuous_scale='viridis'
            )
            fig_scatter.update_layout(height=500)
            st.plotly_chart(fig_scatter, use_container_width=True)

    # Tableau des top chansons
    st.markdown("## üèÜ Top 20 Chansons")

    if len(df_display) > 0:
        # Pr√©parer les donn√©es pour l'affichage
        display_columns = ['Track', 'Artist', 'Spotify Streams', 'Spotify Popularity']
        if 'TikTok Views' in df_display.columns:
            display_columns.append('TikTok Views')
        if 'Explicit Track' in df_display.columns:
            display_columns.append('Explicit Track')

        top_tracks = df_display.nlargest(20, 'Spotify Streams')[display_columns].copy()

        # Formater les colonnes pour l'affichage
        top_tracks['Rank'] = range(1, len(top_tracks) + 1)
        top_tracks['Streams Format√©s'] = top_tracks['Spotify Streams'].apply(format_number)

        if 'TikTok Views' in top_tracks.columns:
            top_tracks['TikTok Format√©'] = top_tracks['TikTok Views'].apply(format_number)

        if 'Explicit Track' in top_tracks.columns:
            top_tracks['Contenu'] = top_tracks['Explicit Track'].apply(lambda x: 'üîû Explicite' if x == 1 else '‚úÖ Clean')

        # Colonnes √† afficher
        display_cols = ['Rank', 'Track', 'Artist', 'Streams Format√©s']
        if 'Spotify Popularity' in top_tracks.columns:
            display_cols.append('Spotify Popularity')
        if 'TikTok Format√©' in top_tracks.columns:
            display_cols.append('TikTok Format√©')
        if 'Contenu' in top_tracks.columns:
            display_cols.append('Contenu')

        st.dataframe(
            top_tracks[display_cols],
            use_container_width=True,
            hide_index=True,
            column_config={
                "Rank": st.column_config.NumberColumn("Rang", width="small"),
                "Track": st.column_config.TextColumn("Titre", width="medium"),
                "Artist": st.column_config.TextColumn("Artiste", width="medium"),
                "Streams Format√©s": st.column_config.TextColumn("Streams Spotify", width="medium"),
                "Spotify Popularity": st.column_config.ProgressColumn("Popularit√©", min_value=0, max_value=100, width="small"),
                "TikTok Format√©": st.column_config.TextColumn("Vues TikTok", width="medium"),
                "Contenu": st.column_config.TextColumn("Type", width="small")
            }
        )

    # Insights et analyses
    st.markdown("## üîç Insights & Analyses")

    if len(df_display) > 0:
        col1, col2 = st.columns(2)

        with col1:
            # Top artiste
            top_artist = df_display.groupby('Artist')['Spotify Streams'].sum().idxmax()
            top_artist_streams = df_display.groupby('Artist')['Spotify Streams'].sum().max()

            st.markdown(f"""
            <div class="insight-card">
                <h3>üéµ Artiste #1</h3>
                <h2>{top_artist}</h2>
                <p>{format_number(top_artist_streams)} streams totaux</p>
            </div>
            """, unsafe_allow_html=True)

            # Chanson la plus populaire TikTok
            if 'TikTok Views' in df_display.columns:
                top_tiktok = df_display.loc[df_display['TikTok Views'].idxmax()]
                st.markdown(f"""
                <div class="success-card">
                    <h3>üî• Viral TikTok</h3>
                    <h4>{top_tiktok['Track']}</h4>
                    <p>par {top_tiktok['Artist']}</p>
                    <p>{format_number(top_tiktok['TikTok Views'])} vues</p>
                </div>
                """, unsafe_allow_html=True)

        with col2:
            # Statistiques de popularit√©
            if 'Spotify Popularity' in df_display.columns:
                high_pop_count = len(df_display[df_display['Spotify Popularity'] > 80])
                avg_pop = df_display['Spotify Popularity'].mean()

                st.markdown(f"""
                <div class="success-card">
                    <h3>‚≠ê Popularit√©</h3>
                    <h2>{avg_pop:.1f}/100</h2>
                    <p>{high_pop_count} chansons > 80/100</p>
                </div>
                """, unsafe_allow_html=True)

            # R√©partition explicite
            if 'Explicit Track' in df_display.columns:
                explicit_count = df_display['Explicit Track'].sum()
                explicit_pct = (explicit_count / len(df_display) * 100)

                st.markdown(f"""
                <div class="insight-card">
                    <h3>üìä Contenu</h3>
                    <h2>{explicit_pct:.1f}% Explicite</h2>
                    <p>{explicit_count} sur {len(df_display)} chansons</p>
                </div>
                """, unsafe_allow_html=True)

    # Export des donn√©es
    st.markdown("## üíæ Export des Donn√©es")

    col1, col2 = st.columns(2)

    with col1:
        if st.button("üìä T√©l√©charger Top 100 (CSV)", type="primary"):
            top_100 = df_display.nlargest(100, 'Spotify Streams')
            csv = top_100.to_csv(index=False)
            st.download_button(
                label="‚¨áÔ∏è T√©l√©charger CSV",
                data=csv,
                file_name=f"spotify_top_100_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv"
            )

    with col2:
        if st.button("üìà T√©l√©charger Donn√©es Filtr√©es (CSV)", type="secondary"):
            csv_filtered = df_display.to_csv(index=False)
            st.download_button(
                label="‚¨áÔ∏è T√©l√©charger Donn√©es Filtr√©es",
                data=csv_filtered,
                file_name=f"spotify_filtered_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv"
            )

    # Footer
    st.markdown("---")
    st.markdown(
        "<div style='text-align: center; color: #666; padding: 20px;'>"
        "üéµ Dashboard Spotify 2024 - Cr√©√© avec Streamlit"
        "</div>",
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()

